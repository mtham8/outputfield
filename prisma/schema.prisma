generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String @db.VarChar(255)
  statement    String @db.Text
  email        String @db.VarChar(255)
  requiredLink String @db.VarChar(255)
  link2        String @db.VarChar(255)
  link3        String @db.VarChar(255)

  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId String     @db.Uuid

  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  archivedAt DateTime @db.Timestamptz(6)
  User       User[]

  ApplicationStatus ApplicationStatus[]
  @@unique([email, invitationId])
}

model ApplicationStatus {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String      @db.Uuid
  status        AppStatus   @default(PENDING_REVIEW)

  @@unique([applicationId, status])
}

enum AppStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

model Invitation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  inviter     User          @relation(fields: [inviterId], references: [id])
  inviterId   String        @unique @db.Uuid
  Application Application[]
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  // Relation fields
  // tokens    Token[]
  // projects  Project[]
  artist        Artist?
  // curator     Curator?
  // venue     Venue?
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?      @unique @db.Uuid

  Invitation Invitation[]

  @@unique([email, applicationId])
}

model Artist {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String   @db.VarChar(255)
  pronouns          String   @db.VarChar(50)
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  bio               String   @db.Text
  location          String   @db.VarChar(255)
  iconColor         String   @db.VarChar(50)
  handle            String   @unique @db.VarChar(255)
  mediums           String[]
  mediumsOfInterest String[]

  // Relation fields
  links Link[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.Uuid
  @@unique([userId, handle])
}

// TODO:
// model Curator {
//   id        Int       @id @default(autoincrement())
// user       User     @relation(fields: [userId], references: [id])
// userId     Int
// }

// TODO:
// model Venue {
//   id        Int       @id @default(autoincrement())
// user       User     @relation(fields: [userId], references: [id])
// userId     Int
// }

model Link {
  id    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String   @db.VarChar(255)
  url   String   @db.VarChar(255)
  type  LinkType @default(OTHER)

  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  @@unique([url, artistId])
}

enum LinkType {
  WORK
  OTHER
}
